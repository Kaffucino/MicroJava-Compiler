INFO  16:20:10,441 - Compiling source file: C:\pp1_domaci\workspace\MJCompiler\test\program.mj
INFO  16:20:10,472 - #2 program
INFO  16:20:10,472 - #16 test302
INFO  16:20:10,472 - #48 const
INFO  16:20:10,472 - #16 int
INFO  16:20:10,472 - #16 jedan
INFO  16:20:10,473 - #13 =
INFO  16:20:10,473 - #15 1
INFO  16:20:10,473 - #5 ;
INFO  16:20:10,473 - #16 int
INFO  16:20:10,474 - #16 i
INFO  16:20:10,474 - #5 ;
INFO  16:20:10,474 - #16 bool
INFO  16:20:10,474 - #16 ibool
INFO  16:20:10,474 - #5 ;
INFO  16:20:10,474 - #16 int
INFO  16:20:10,474 - #16 niz2
INFO  16:20:10,474 - #5 ;
INFO  16:20:10,475 - #49 record
INFO  16:20:10,475 - #16 Test
INFO  16:20:10,475 - #3 {
INFO  16:20:10,475 - #16 int
INFO  16:20:10,475 - #16 niz
INFO  16:20:10,475 - #50 [
INFO  16:20:10,475 - #51 ]
INFO  16:20:10,475 - #5 ;
INFO  16:20:10,475 - #16 int
INFO  16:20:10,476 - #16 a
INFO  16:20:10,476 - #5 ;
INFO  16:20:10,476 - #4 }
INFO  16:20:10,476 - #16 Test
INFO  16:20:10,476 - #16 t1
INFO  16:20:10,476 - #8 ,
INFO  16:20:10,477 - #16 t2
INFO  16:20:10,477 - #5 ;
INFO  16:20:10,477 - #3 {
INFO  16:20:10,477 - #16 int
INFO  16:20:10,477 - #16 sum
INFO  16:20:10,477 - #6 (
INFO  16:20:10,478 - #16 int
INFO  16:20:10,478 - #16 z
INFO  16:20:10,478 - #8 ,
INFO  16:20:10,478 - #16 int
INFO  16:20:10,478 - #16 d
INFO  16:20:10,478 - #7 )
INFO  16:20:10,478 - #3 {
INFO  16:20:10,479 - #10 return
INFO  16:20:10,479 - #16 z
INFO  16:20:10,479 - #11 +
INFO  16:20:10,480 - #16 d
INFO  16:20:10,481 - #5 ;
INFO  16:20:10,481 - #4 }
INFO  16:20:10,481 - #16 int
INFO  16:20:10,481 - #16 inkrement
INFO  16:20:10,481 - #6 (
INFO  16:20:10,482 - #16 int
INFO  16:20:10,482 - #16 a
INFO  16:20:10,482 - #8 ,
INFO  16:20:10,482 - #16 int
INFO  16:20:10,482 - #16 inc
INFO  16:20:10,482 - #7 )
INFO  16:20:10,482 - #16 int
INFO  16:20:10,482 - #16 pom
INFO  16:20:10,482 - #5 ;
INFO  16:20:10,482 - #3 {
INFO  16:20:10,483 - #19 if
INFO  16:20:10,483 - #6 (
INFO  16:20:10,483 - #16 inc
INFO  16:20:10,483 - #22 ==
INFO  16:20:10,485 - #16 jedan
INFO  16:20:10,486 - #7 )
INFO  16:20:10,487 - #16 pom
INFO  16:20:10,488 - #13 =
INFO  16:20:10,488 - #15 1
INFO  16:20:10,488 - #5 ;
INFO  16:20:10,488 - #20 else
INFO  16:20:10,488 - #19 if
INFO  16:20:10,488 - #6 (
INFO  16:20:10,488 - #16 inc
INFO  16:20:10,488 - #22 ==
INFO  16:20:10,488 - #15 2
INFO  16:20:10,489 - #7 )
INFO  16:20:10,489 - #16 pom
INFO  16:20:10,489 - #13 =
INFO  16:20:10,489 - #16 a
INFO  16:20:10,489 - #5 ;
INFO  16:20:10,489 - #10 return
INFO  16:20:10,489 - #16 sum
INFO  16:20:10,489 - #6 (
INFO  16:20:10,489 - #16 a
INFO  16:20:10,489 - #8 ,
INFO  16:20:10,489 - #16 pom
INFO  16:20:10,489 - #7 )
INFO  16:20:10,490 - #5 ;
INFO  16:20:10,490 - #4 }
INFO  16:20:10,490 - #16 bool
INFO  16:20:10,490 - #16 verify
INFO  16:20:10,490 - #6 (
INFO  16:20:10,491 - #7 )
INFO  16:20:10,491 - #3 {
INFO  16:20:10,491 - #9 print
INFO  16:20:10,491 - #6 (
INFO  16:20:10,491 - #17 'v'
INFO  16:20:10,491 - #7 )
INFO  16:20:10,491 - #5 ;
INFO  16:20:10,491 - #10 return
INFO  16:20:10,492 - #18 false
INFO  16:20:10,492 - #5 ;
INFO  16:20:10,492 - #4 }
INFO  16:20:10,492 - #14 void
INFO  16:20:10,492 - #16 main
INFO  16:20:10,492 - #6 (
INFO  16:20:10,492 - #7 )
INFO  16:20:10,492 - #3 {
INFO  16:20:10,492 - #19 if
INFO  16:20:10,492 - #6 (
INFO  16:20:10,492 - #15 1
INFO  16:20:10,492 - #23 !=
INFO  16:20:10,492 - #15 1
INFO  16:20:10,493 - #7 )
INFO  16:20:10,493 - #9 print
INFO  16:20:10,493 - #6 (
INFO  16:20:10,493 - #12 -
INFO  16:20:10,493 - #15 6
INFO  16:20:10,493 - #7 )
INFO  16:20:10,493 - #5 ;
INFO  16:20:10,493 - #20 else
INFO  16:20:10,493 - #9 print
INFO  16:20:10,493 - #6 (
INFO  16:20:10,493 - #15 0
INFO  16:20:10,493 - #7 )
INFO  16:20:10,493 - #5 ;
INFO  16:20:10,493 - #16 ibool
INFO  16:20:10,493 - #13 =
INFO  16:20:10,494 - #18 false
INFO  16:20:10,494 - #5 ;
INFO  16:20:10,494 - #16 i
INFO  16:20:10,494 - #13 =
INFO  16:20:10,494 - #15 0
INFO  16:20:10,494 - #5 ;
INFO  16:20:10,494 - #34 do
INFO  16:20:10,494 - #3 {
INFO  16:20:10,494 - #19 if
INFO  16:20:10,494 - #6 (
INFO  16:20:10,494 - #16 i
INFO  16:20:10,494 - #22 ==
INFO  16:20:10,494 - #15 2
INFO  16:20:10,494 - #7 )
INFO  16:20:10,494 - #16 ibool
INFO  16:20:10,494 - #13 =
INFO  16:20:10,494 - #18 true
INFO  16:20:10,494 - #5 ;
INFO  16:20:10,494 - #16 i
INFO  16:20:10,495 - #46 ++
INFO  16:20:10,495 - #5 ;
INFO  16:20:10,495 - #4 }
INFO  16:20:10,495 - #35 while
INFO  16:20:10,495 - #6 (
INFO  16:20:10,495 - #16 i
INFO  16:20:10,495 - #26 <
INFO  16:20:10,495 - #15 5
INFO  16:20:10,496 - #7 )
INFO  16:20:10,496 - #5 ;
INFO  16:20:10,496 - #19 if
INFO  16:20:10,496 - #6 (
INFO  16:20:10,496 - #16 ibool
INFO  16:20:10,496 - #7 )
INFO  16:20:10,496 - #19 if
INFO  16:20:10,496 - #6 (
INFO  16:20:10,496 - #16 i
INFO  16:20:10,496 - #22 ==
INFO  16:20:10,496 - #15 5
INFO  16:20:10,496 - #7 )
INFO  16:20:10,496 - #9 print
INFO  16:20:10,496 - #6 (
INFO  16:20:10,496 - #15 1
INFO  16:20:10,496 - #7 )
INFO  16:20:10,496 - #5 ;
INFO  16:20:10,496 - #20 else
INFO  16:20:10,496 - #9 print
INFO  16:20:10,496 - #6 (
INFO  16:20:10,496 - #12 -
INFO  16:20:10,496 - #15 1
INFO  16:20:10,496 - #7 )
INFO  16:20:10,497 - #5 ;
INFO  16:20:10,497 - #16 t1
INFO  16:20:10,497 - #13 =
INFO  16:20:10,497 - #36 new
INFO  16:20:10,497 - #16 Test
INFO  16:20:10,497 - #5 ;
INFO  16:20:10,497 - #16 t1
INFO  16:20:10,497 - #43 .
INFO  16:20:10,497 - #16 a
INFO  16:20:10,497 - #13 =
INFO  16:20:10,497 - #15 2
INFO  16:20:10,497 - #5 ;
INFO  16:20:10,497 - #16 t1
INFO  16:20:10,497 - #43 .
INFO  16:20:10,497 - #16 niz
INFO  16:20:10,497 - #13 =
INFO  16:20:10,497 - #36 new
INFO  16:20:10,497 - #16 int
INFO  16:20:10,497 - #50 [
INFO  16:20:10,497 - #15 3
INFO  16:20:10,497 - #51 ]
INFO  16:20:10,497 - #5 ;
INFO  16:20:10,497 - #16 t1
INFO  16:20:10,497 - #43 .
INFO  16:20:10,497 - #16 niz
INFO  16:20:10,498 - #50 [
INFO  16:20:10,498 - #15 0
INFO  16:20:10,498 - #51 ]
INFO  16:20:10,498 - #13 =
INFO  16:20:10,498 - #15 1
INFO  16:20:10,498 - #28 *
INFO  16:20:10,498 - #16 t1
INFO  16:20:10,498 - #43 .
INFO  16:20:10,498 - #16 a
INFO  16:20:10,498 - #5 ;
INFO  16:20:10,499 - #16 t1
INFO  16:20:10,499 - #43 .
INFO  16:20:10,499 - #16 niz
INFO  16:20:10,499 - #50 [
INFO  16:20:10,499 - #15 1
INFO  16:20:10,499 - #51 ]
INFO  16:20:10,499 - #13 =
INFO  16:20:10,499 - #15 2
INFO  16:20:10,499 - #28 *
INFO  16:20:10,499 - #16 t1
INFO  16:20:10,499 - #43 .
INFO  16:20:10,499 - #16 a
INFO  16:20:10,499 - #5 ;
INFO  16:20:10,499 - #16 t1
INFO  16:20:10,499 - #43 .
INFO  16:20:10,499 - #16 niz
INFO  16:20:10,499 - #50 [
INFO  16:20:10,499 - #15 2
INFO  16:20:10,499 - #51 ]
INFO  16:20:10,499 - #13 =
INFO  16:20:10,499 - #16 sum
INFO  16:20:10,499 - #6 (
INFO  16:20:10,499 - #16 t1
INFO  16:20:10,499 - #43 .
INFO  16:20:10,499 - #16 niz
INFO  16:20:10,499 - #50 [
INFO  16:20:10,499 - #15 1
INFO  16:20:10,499 - #51 ]
INFO  16:20:10,499 - #8 ,
INFO  16:20:10,499 - #16 t1
INFO  16:20:10,499 - #43 .
INFO  16:20:10,499 - #16 niz
INFO  16:20:10,499 - #50 [
INFO  16:20:10,499 - #15 0
INFO  16:20:10,499 - #51 ]
INFO  16:20:10,499 - #7 )
INFO  16:20:10,500 - #28 *
INFO  16:20:10,500 - #16 t1
INFO  16:20:10,500 - #43 .
INFO  16:20:10,500 - #16 a
INFO  16:20:10,500 - #11 +
INFO  16:20:10,500 - #15 1
INFO  16:20:10,500 - #5 ;
INFO  16:20:10,500 - #19 if
INFO  16:20:10,500 - #6 (
INFO  16:20:10,500 - #16 verify
INFO  16:20:10,500 - #6 (
INFO  16:20:10,500 - #7 )
INFO  16:20:10,500 - #45 ||
INFO  16:20:10,500 - #16 t1
INFO  16:20:10,500 - #43 .
INFO  16:20:10,500 - #16 niz
INFO  16:20:10,500 - #50 [
INFO  16:20:10,500 - #15 2
INFO  16:20:10,500 - #51 ]
INFO  16:20:10,500 - #22 ==
INFO  16:20:10,500 - #15 4
INFO  16:20:10,500 - #7 )
INFO  16:20:10,500 - #9 print
INFO  16:20:10,500 - #6 (
INFO  16:20:10,500 - #16 ord
INFO  16:20:10,500 - #6 (
INFO  16:20:10,500 - #17 'A'
INFO  16:20:10,500 - #7 )
INFO  16:20:10,501 - #7 )
INFO  16:20:10,501 - #5 ;
INFO  16:20:10,501 - #20 else
INFO  16:20:10,501 - #9 print
INFO  16:20:10,501 - #6 (
INFO  16:20:10,501 - #16 ord
INFO  16:20:10,501 - #6 (
INFO  16:20:10,501 - #17 'a'
INFO  16:20:10,501 - #7 )
INFO  16:20:10,501 - #7 )
INFO  16:20:10,501 - #5 ;
INFO  16:20:10,501 - #9 print
INFO  16:20:10,501 - #6 (
INFO  16:20:10,501 - #16 eol
INFO  16:20:10,501 - #7 )
INFO  16:20:10,501 - #5 ;
INFO  16:20:10,501 - #16 i
INFO  16:20:10,501 - #13 =
INFO  16:20:10,501 - #15 0
INFO  16:20:10,501 - #5 ;
INFO  16:20:10,501 - #34 do
INFO  16:20:10,501 - #3 {
INFO  16:20:10,501 - #19 if
INFO  16:20:10,501 - #6 (
INFO  16:20:10,501 - #16 i
INFO  16:20:10,501 - #22 ==
INFO  16:20:10,501 - #15 3
INFO  16:20:10,501 - #7 )
INFO  16:20:10,501 - #3 {
INFO  16:20:10,501 - #16 i
INFO  16:20:10,501 - #46 ++
INFO  16:20:10,501 - #5 ;
INFO  16:20:10,501 - #39 continue
INFO  16:20:10,502 - #5 ;
INFO  16:20:10,502 - #4 }
INFO  16:20:10,502 - #19 if
INFO  16:20:10,502 - #6 (
INFO  16:20:10,502 - #16 i
INFO  16:20:10,502 - #22 ==
INFO  16:20:10,502 - #15 4
INFO  16:20:10,502 - #7 )
INFO  16:20:10,502 - #31 break
INFO  16:20:10,502 - #5 ;
INFO  16:20:10,502 - #16 i
INFO  16:20:10,503 - #13 =
INFO  16:20:10,503 - #16 inkrement
INFO  16:20:10,503 - #6 (
INFO  16:20:10,503 - #16 i
INFO  16:20:10,503 - #8 ,
INFO  16:20:10,503 - #15 1
INFO  16:20:10,503 - #7 )
INFO  16:20:10,503 - #5 ;
INFO  16:20:10,503 - #4 }
INFO  16:20:10,503 - #35 while
INFO  16:20:10,503 - #6 (
INFO  16:20:10,503 - #16 i
INFO  16:20:10,503 - #26 <
INFO  16:20:10,503 - #15 10
INFO  16:20:10,503 - #7 )
INFO  16:20:10,503 - #5 ;
INFO  16:20:10,503 - #19 if
INFO  16:20:10,503 - #6 (
INFO  16:20:10,503 - #16 i
INFO  16:20:10,503 - #22 ==
INFO  16:20:10,503 - #15 3
INFO  16:20:10,503 - #44 &&
INFO  16:20:10,503 - #16 verify
INFO  16:20:10,503 - #6 (
INFO  16:20:10,503 - #7 )
INFO  16:20:10,503 - #7 )
INFO  16:20:10,503 - #9 print
INFO  16:20:10,503 - #6 (
INFO  16:20:10,503 - #12 -
INFO  16:20:10,503 - #15 4
INFO  16:20:10,503 - #7 )
INFO  16:20:10,503 - #5 ;
INFO  16:20:10,504 - #20 else
INFO  16:20:10,504 - #9 print
INFO  16:20:10,504 - #6 (
INFO  16:20:10,504 - #15 4
INFO  16:20:10,504 - #7 )
INFO  16:20:10,504 - #5 ;
INFO  16:20:10,504 - #9 print
INFO  16:20:10,504 - #6 (
INFO  16:20:10,504 - #16 eol
INFO  16:20:10,504 - #7 )
INFO  16:20:10,504 - #5 ;
INFO  16:20:10,504 - #9 print
INFO  16:20:10,504 - #6 (
INFO  16:20:10,504 - #16 sum
INFO  16:20:10,504 - #6 (
INFO  16:20:10,504 - #16 sum
INFO  16:20:10,504 - #6 (
INFO  16:20:10,504 - #16 t1
INFO  16:20:10,504 - #43 .
INFO  16:20:10,504 - #16 niz
INFO  16:20:10,504 - #50 [
INFO  16:20:10,504 - #15 0
INFO  16:20:10,504 - #51 ]
INFO  16:20:10,504 - #8 ,
INFO  16:20:10,504 - #16 t1
INFO  16:20:10,504 - #43 .
INFO  16:20:10,504 - #16 niz
INFO  16:20:10,504 - #50 [
INFO  16:20:10,504 - #15 1
INFO  16:20:10,505 - #51 ]
INFO  16:20:10,505 - #7 )
INFO  16:20:10,505 - #8 ,
INFO  16:20:10,505 - #16 t1
INFO  16:20:10,505 - #43 .
INFO  16:20:10,505 - #16 niz
INFO  16:20:10,505 - #50 [
INFO  16:20:10,505 - #15 2
INFO  16:20:10,505 - #51 ]
INFO  16:20:10,505 - #7 )
INFO  16:20:10,505 - #7 )
INFO  16:20:10,505 - #5 ;
INFO  16:20:10,505 - #9 print
INFO  16:20:10,505 - #6 (
INFO  16:20:10,505 - #16 eol
INFO  16:20:10,505 - #7 )
INFO  16:20:10,505 - #5 ;
INFO  16:20:10,505 - #9 print
INFO  16:20:10,505 - #6 (
INFO  16:20:10,505 - #16 inkrement
INFO  16:20:10,505 - #6 (
INFO  16:20:10,505 - #16 t1
INFO  16:20:10,505 - #43 .
INFO  16:20:10,505 - #16 niz
INFO  16:20:10,505 - #50 [
INFO  16:20:10,505 - #15 2
INFO  16:20:10,505 - #51 ]
INFO  16:20:10,505 - #8 ,
INFO  16:20:10,505 - #15 2
INFO  16:20:10,505 - #7 )
INFO  16:20:10,505 - #7 )
INFO  16:20:10,505 - #5 ;
INFO  16:20:10,505 - #16 t2
INFO  16:20:10,505 - #13 =
INFO  16:20:10,505 - #36 new
INFO  16:20:10,505 - #16 Test
INFO  16:20:10,505 - #5 ;
INFO  16:20:10,505 - #16 t2
INFO  16:20:10,505 - #43 .
INFO  16:20:10,505 - #16 a
INFO  16:20:10,505 - #13 =
INFO  16:20:10,505 - #15 3
INFO  16:20:10,505 - #5 ;
INFO  16:20:10,505 - #16 t2
INFO  16:20:10,505 - #43 .
INFO  16:20:10,505 - #16 niz
INFO  16:20:10,505 - #13 =
INFO  16:20:10,506 - #36 new
INFO  16:20:10,506 - #16 int
INFO  16:20:10,506 - #50 [
INFO  16:20:10,506 - #15 3
INFO  16:20:10,506 - #51 ]
INFO  16:20:10,506 - #5 ;
INFO  16:20:10,506 - #16 i
INFO  16:20:10,506 - #13 =
INFO  16:20:10,506 - #15 0
INFO  16:20:10,506 - #5 ;
INFO  16:20:10,506 - #34 do
INFO  16:20:10,506 - #3 {
INFO  16:20:10,506 - #16 t2
INFO  16:20:10,506 - #43 .
INFO  16:20:10,506 - #16 niz
INFO  16:20:10,506 - #50 [
INFO  16:20:10,506 - #16 i
INFO  16:20:10,506 - #51 ]
INFO  16:20:10,506 - #13 =
INFO  16:20:10,506 - #16 t1
INFO  16:20:10,506 - #43 .
INFO  16:20:10,506 - #16 niz
INFO  16:20:10,506 - #50 [
INFO  16:20:10,506 - #16 i
INFO  16:20:10,506 - #51 ]
INFO  16:20:10,506 - #28 *
INFO  16:20:10,506 - #15 2
INFO  16:20:10,506 - #28 *
INFO  16:20:10,506 - #16 t2
INFO  16:20:10,506 - #43 .
INFO  16:20:10,506 - #16 a
INFO  16:20:10,506 - #5 ;
INFO  16:20:10,506 - #16 i
INFO  16:20:10,506 - #46 ++
INFO  16:20:10,506 - #5 ;
INFO  16:20:10,506 - #4 }
INFO  16:20:10,506 - #35 while
INFO  16:20:10,506 - #6 (
INFO  16:20:10,507 - #16 i
INFO  16:20:10,507 - #26 <
INFO  16:20:10,507 - #15 3
INFO  16:20:10,507 - #7 )
INFO  16:20:10,507 - #5 ;
INFO  16:20:10,507 - #9 print
INFO  16:20:10,507 - #6 (
INFO  16:20:10,507 - #16 t2
INFO  16:20:10,507 - #43 .
INFO  16:20:10,507 - #16 niz
INFO  16:20:10,507 - #50 [
INFO  16:20:10,507 - #15 0
INFO  16:20:10,507 - #51 ]
INFO  16:20:10,507 - #7 )
INFO  16:20:10,507 - #5 ;
INFO  16:20:10,507 - #9 print
INFO  16:20:10,507 - #6 (
INFO  16:20:10,507 - #16 t2
INFO  16:20:10,510 - #43 .
INFO  16:20:10,510 - #16 niz
INFO  16:20:10,510 - #50 [
INFO  16:20:10,510 - #15 1
INFO  16:20:10,510 - #51 ]
INFO  16:20:10,510 - #7 )
INFO  16:20:10,510 - #5 ;
INFO  16:20:10,510 - #9 print
INFO  16:20:10,510 - #6 (
INFO  16:20:10,510 - #16 t2
INFO  16:20:10,510 - #43 .
INFO  16:20:10,510 - #16 niz
INFO  16:20:10,510 - #50 [
INFO  16:20:10,510 - #15 2
INFO  16:20:10,510 - #51 ]
INFO  16:20:10,510 - #7 )
INFO  16:20:10,510 - #5 ;
INFO  16:20:10,510 - #9 print
INFO  16:20:10,510 - #6 (
INFO  16:20:10,510 - #16 eol
INFO  16:20:10,510 - #7 )
INFO  16:20:10,511 - #5 ;
INFO  16:20:10,511 - #16 i
INFO  16:20:10,511 - #13 =
INFO  16:20:10,511 - #15 0
INFO  16:20:10,511 - #5 ;
INFO  16:20:10,511 - #16 niz2
INFO  16:20:10,511 - #13 =
INFO  16:20:10,511 - #15 0
INFO  16:20:10,511 - #5 ;
INFO  16:20:10,511 - #34 do
INFO  16:20:10,511 - #3 {
INFO  16:20:10,511 - #16 niz2
INFO  16:20:10,511 - #13 =
INFO  16:20:10,511 - #16 niz2
INFO  16:20:10,511 - #11 +
INFO  16:20:10,511 - #16 t1
INFO  16:20:10,511 - #43 .
INFO  16:20:10,511 - #16 niz
INFO  16:20:10,511 - #50 [
INFO  16:20:10,511 - #16 i
INFO  16:20:10,511 - #51 ]
INFO  16:20:10,511 - #28 *
INFO  16:20:10,511 - #16 t2
INFO  16:20:10,511 - #43 .
INFO  16:20:10,511 - #16 niz
INFO  16:20:10,511 - #50 [
INFO  16:20:10,511 - #16 i
INFO  16:20:10,511 - #51 ]
INFO  16:20:10,511 - #5 ;
INFO  16:20:10,511 - #16 i
INFO  16:20:10,511 - #46 ++
INFO  16:20:10,511 - #5 ;
INFO  16:20:10,511 - #4 }
INFO  16:20:10,511 - #35 while
INFO  16:20:10,511 - #6 (
INFO  16:20:10,511 - #16 i
INFO  16:20:10,511 - #26 <
INFO  16:20:10,511 - #15 3
INFO  16:20:10,511 - #7 )
INFO  16:20:10,511 - #5 ;
INFO  16:20:10,511 - #9 print
INFO  16:20:10,511 - #6 (
INFO  16:20:10,511 - #16 niz2
INFO  16:20:10,511 - #7 )
INFO  16:20:10,511 - #5 ;
INFO  16:20:10,511 - #9 print
INFO  16:20:10,511 - #6 (
INFO  16:20:10,511 - #16 eol
INFO  16:20:10,511 - #7 )
INFO  16:20:10,511 - #5 ;
INFO  16:20:10,511 - #4 }
INFO  16:20:10,511 - #4 }
INFO  16:20:10,519 - Trenutan tip konstante je:  int na liniji 5
INFO  16:20:10,519 - Deklarisana promenljiva i na liniji 7
INFO  16:20:10,519 - Deklarisana promenljiva ibool na liniji 8
INFO  16:20:10,519 - Deklarisana promenljiva niz2 na liniji 10
INFO  16:20:10,519 - Deklarisana je rekord :  Test na liniji 12
INFO  16:20:10,519 - Deklarisana promenljiva niz na liniji 13
INFO  16:20:10,519 - Deklarisana promenljiva a na liniji 14
INFO  16:20:10,520 - Deklarisana promenljiva t2 na liniji 17
INFO  16:20:10,520 - Deklarisana promenljiva t1 na liniji 17
INFO  16:20:10,520 - Obradjuje se funkcija sum na liniji 21
INFO  16:20:10,520 - Naveden argument d na liniji 21
INFO  16:20:10,520 - Naveden argument z na liniji 21
INFO  16:20:10,520 - Obradjuje se funkcija inkrement na liniji 26
INFO  16:20:10,520 - Naveden argument inc na liniji 26
INFO  16:20:10,520 - Naveden argument a na liniji 26
INFO  16:20:10,520 - Deklarisana promenljiva pom na liniji 27
INFO  16:20:10,520 - Pronadjen poziv funkcije sum na liniji 32
INFO  16:20:10,520 - Obradjuje se funkcija verify na liniji 35
INFO  16:20:10,520 - Obradjuje se funkcija main na liniji 40
INFO  16:20:10,521 - Pronadjen poziv funkcije sum na liniji 60
INFO  16:20:10,521 - Pronadjen poziv funkcije ord na liniji 61
INFO  16:20:10,521 - Pronadjen poziv funkcije ord na liniji 62
INFO  16:20:10,521 - Pronadjen poziv funkcije inkrement na liniji 73
INFO  16:20:10,521 - Pronadjen poziv funkcije sum na liniji 84
INFO  16:20:10,521 - Pronadjen poziv funkcije sum na liniji 84
INFO  16:20:10,521 - Pronadjen poziv funkcije inkrement na liniji 87
INFO  16:20:10,532 - Parsiranje uspesno zavrseno!
